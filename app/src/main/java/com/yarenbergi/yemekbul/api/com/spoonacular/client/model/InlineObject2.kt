/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: david@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.yarenbergi.yemekbul.api.com.spoonacular.client.model


import com.squareup.moshi.Json
/**
 * 
 * @param ingredientList The ingredient list of the recipe, one ingredient per line.
 * @param servings The number of servings.
 * @param mode The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
 * @param defaultCss Whether the default CSS should be added to the response.
 * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
 */
data class InlineObject2 (
    /* The ingredient list of the recipe, one ingredient per line. */
    @Json(name = "ingredientList")
    val ingredientList: kotlin.String,
    /* The number of servings. */
    @Json(name = "servings")
    val servings: java.math.BigDecimal,
    /* The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full). */
    @Json(name = "mode")
    val mode: java.math.BigDecimal? = null,
    /* Whether the default CSS should be added to the response. */
    @Json(name = "defaultCss")
    val defaultCss: kotlin.Boolean? = null,
    /* Whether to show a backlink to spoonacular. If set false, this call counts against your quota. */
    @Json(name = "showBacklink")
    val showBacklink: kotlin.Boolean? = null
) {

}

