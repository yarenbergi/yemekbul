/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: david@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.yarenbergi.yemekbul.api.com.spoonacular

import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject10
import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject11
import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject12
import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject13
import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject14
import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject15
import com.yarenbergi.yemekbul.api.com.spoonacular.client.model.InlineObject9

import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.ApiClient
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.ClientException
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.ClientError
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.ServerException
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.ServerError
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.MultiValueMap
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.RequestConfig
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.RequestMethod
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.ResponseType
import com.yarenbergi.yemekbul.api.spoonacular.infrastructure.Success

class DefaultApi(basePath: kotlin.String = "https://api.spoonacular.com") : ApiClient(basePath) {

    /**
    * Add to Meal Plan
    * Add an item to the user&#39;s meal plan.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @param inlineObject11  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun addToMealPlan(username: kotlin.String, hash: kotlin.String, inlineObject11: InlineObject11) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject11
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/items".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Add to Shopping List
    * Add an item to the current shopping list of a user.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @param inlineObject14  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun addToShoppingList(username: kotlin.String, hash: kotlin.String, inlineObject14: InlineObject14) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject14
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/shopping-list/items".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Analyze a Recipe Search Query
    * Parse a recipe search query to find out its intention.
    * @param q The recipe search query. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun analyzeARecipeSearchQuery(q: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/queries/analyze",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Analyze Recipe Instructions
    * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
    * @param instructions The instructions to be analyzed. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun analyzeRecipeInstructions(instructions: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = mapOf("instructions" to "$instructions")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/analyzeInstructions",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Autocomplete Ingredient Search
    * Autocomplete the entry of an ingredient.
    * @param query The partial or full ingredient name. 
    * @param number The number of results to return (between 1 and 100). (optional)
    * @param metaInformation Whether to return more meta information about the ingredients. (optional)
    * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteIngredientSearch(query: kotlin.String, number: java.math.BigDecimal?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"), "metaInformation" to listOf("$metaInformation"), "intolerances" to listOf("$intolerances"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/autocomplete",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Autocomplete Menu Item Search
    * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
    * @param query The (partial) search query. 
    * @param number The number of results to return (between 1 and 25). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteMenuItemSearch(query: kotlin.String, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/menuItems/suggest",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Autocomplete Product Search
    * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
    * @param query The (partial) search query. 
    * @param number The number of results to return (between 1 and 25). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteProductSearch(query: kotlin.String, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/suggest",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Autocomplete Recipe Search
    * Autocomplete a partial input to suggest possible recipe names.
    * @param query The query to be autocompleted. 
    * @param number The number of results to return (between 1 and 25). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteRecipeSearch(query: kotlin.String, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/autocomplete",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Classify Cuisine
    * Classify the recipe&#39;s cuisine.
    * @param title The title of the recipe. 
    * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun classifyCuisine(title: kotlin.String, ingredientList: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = mapOf("title" to "$title", "ingredientList" to "$ingredientList")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/cuisine",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Classify Grocery Product
    * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
    * @param inlineObject9  
    * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun classifyGroceryProduct(inlineObject9: InlineObject9, locale: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject9
        val localVariableQuery: MultiValueMap = mapOf("locale" to listOf("$locale"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/products/classify",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Classify Grocery Product Bulk
    * Provide a set of product jsons, get back classified products.
    * @param kotlinPeriodAny  
    * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun classifyGroceryProductBulk(kotlinPeriodAny: kotlin.Array<kotlin.Any>, locale: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = kotlinPeriodAny
        val localVariableQuery: MultiValueMap = mapOf("locale" to listOf("$locale"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/products/classifyBatch",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Clear Meal Plan Day
    * Delete all planned items from the user&#39;s meal plan for a specific day.
    * @param username The username. 
    * @param date The date in the format yyyy-mm-dd. 
    * @param hash The private hash for the username. 
    * @param inlineObject10  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun clearMealPlanDay(username: kotlin.String, date: kotlin.String, hash: kotlin.String, inlineObject10: InlineObject10) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject10
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/day/{date}".replace("{"+"username"+"}", "$username").replace("{"+"date"+"}", "$date"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Compute Glycemic Load
    * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
    * @param body  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun computeGlycemicLoad(body: kotlin.Any) : kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/ingredients/glycemicLoad",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Connect User
    * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
    * @param body  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun connectUser(body: kotlin.Any) : kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/users/connect",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Convert Amounts
    * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
    * @param ingredientName The ingredient which you want to convert. 
    * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. 
    * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
    * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun convertAmounts(ingredientName: kotlin.String, sourceAmount: java.math.BigDecimal, sourceUnit: kotlin.String, targetUnit: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ingredientName" to listOf("$ingredientName"), "sourceAmount" to listOf("$sourceAmount"), "sourceUnit" to listOf("$sourceUnit"), "targetUnit" to listOf("$targetUnit"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/convert",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Create Recipe Card
    * Generate a recipe card for a recipe.
    * @param title The title of the recipe. 
    * @param image The binary image of the recipe as jpg. 
    * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n). 
    * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n). 
    * @param readyInMinutes The number of minutes it takes to get the recipe on the table. 
    * @param servings The number of servings the recipe makes. 
    * @param mask The mask to put over the recipe image (\\\&quot;ellipseMask\\\&quot;, \\\&quot;diamondMask\\\&quot;, \\\&quot;starMask\\\&quot;, \\\&quot;heartMask\\\&quot;, \\\&quot;potMask\\\&quot;, \\\&quot;fishMask\\\&quot;). 
    * @param backgroundImage The background image (\\\&quot;none\\\&quot;,\\\&quot;background1\\\&quot;, or \\\&quot;background2\\\&quot;). 
    * @param author The author of the recipe. (optional)
    * @param backgroundColor The background color for the recipe card as a hex-string. (optional)
    * @param fontColor The font color for the recipe card as a hex-string. (optional)
    * @param source The source of the recipe. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun createRecipeCard(title: kotlin.String, image: java.io.File, ingredients: kotlin.String, instructions: kotlin.String, readyInMinutes: java.math.BigDecimal, servings: java.math.BigDecimal, mask: kotlin.String, backgroundImage: kotlin.String, author: kotlin.String?, backgroundColor: kotlin.String?, fontColor: kotlin.String?, source: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = mapOf("title" to "$title", "image" to "$image", "ingredients" to "$ingredients", "instructions" to "$instructions", "readyInMinutes" to "$readyInMinutes", "servings" to "$servings", "mask" to "$mask", "backgroundImage" to "$backgroundImage", "author" to "$author", "backgroundColor" to "$backgroundColor", "fontColor" to "$fontColor", "source" to "$source")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeRecipe",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Delete from Meal Plan
    * Delete an item from the user&#39;s meal plan.
    * @param username The username. 
    * @param id The shopping list item id. 
    * @param hash The private hash for the username. 
    * @param inlineObject12  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun deleteFromMealPlan(username: kotlin.String, id: java.math.BigDecimal, hash: kotlin.String, inlineObject12: InlineObject12) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject12
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/items/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Delete from Shopping List
    * Delete an item from the current shopping list of the user.
    * @param username The username. 
    * @param id The shopping list item id. 
    * @param hash The private hash for the username. 
    * @param inlineObject15  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun deleteFromShoppingList(username: kotlin.String, id: java.math.BigDecimal, hash: kotlin.String, inlineObject15: InlineObject15) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject15
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/shopping-list/items/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Detect Food in Text
    * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
    * @param text The text in which food items, such as dish names and ingredients, should be detected in. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun detectFoodInText(text: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = mapOf("text" to "$text")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/detect",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Extract Recipe from Website
    * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
    * @param url The URL of the recipe page. 
    * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
    * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun extractRecipeFromWebsite(url: kotlin.String, forceExtraction: kotlin.Boolean?, analyze: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("url" to listOf("$url"), "forceExtraction" to listOf("$forceExtraction"), "analyze" to listOf("$analyze"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/extract",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Generate Meal Plan
    * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
    * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
    * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
    * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun generateMealPlan(timeFrame: kotlin.String?, targetCalories: java.math.BigDecimal?, diet: kotlin.String?, exclude: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("timeFrame" to listOf("$timeFrame"), "targetCalories" to listOf("$targetCalories"), "diet" to listOf("$diet"), "exclude" to listOf("$exclude"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/generate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Generate Shopping List
    * Generate the shopping list for a user from the meal planner in a given time frame.
    * @param username The username. 
    * @param startMinusDate The start date in the format yyyy-mm-dd. 
    * @param endMinusDate The end date in the format yyyy-mm-dd. 
    * @param hash The private hash for the username. 
    * @param inlineObject13  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun generateShoppingList(username: kotlin.String, startMinusDate: kotlin.String, endMinusDate: kotlin.String, hash: kotlin.String, inlineObject13: InlineObject13) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject13
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/shopping-list/{start-date}/{end-date}".replace("{"+"username"+"}", "$username").replace("{"+"start-date"+"}", "$startMinusDate").replace("{"+"end-date"+"}", "$endMinusDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get a Random Food Joke
    * Get a random joke that is related to food. Caution: this is an endpoint for adults!
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getARandomFoodJoke() : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/jokes/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Analyzed Recipe Instructions
    * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
    * @param id The recipe id. 
    * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getAnalyzedRecipeInstructions(id: java.math.BigDecimal, stepBreakdown: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("stepBreakdown" to listOf("$stepBreakdown"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/analyzedInstructions".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Comparable Products
    * Find comparable products to the given one.
    * @param upc The UPC of the product for which you want to find comparable products. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getComparableProducts(upc: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/upc/{upc}/comparable".replace("{"+"upc"+"}", "$upc"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Conversation Suggests
    * This endpoint returns suggestions for things the user can say or ask the chatbot.
    * @param query A (partial) query from the user. The endpoint will return if it matches topics it can talk about. 
    * @param number The number of suggestions to return (between 1 and 25). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getConversationSuggests(query: kotlin.String, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/converse/suggest",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Dish Pairing for Wine
    * Find a dish that goes well with a given wine.
    * @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getDishPairingForWine(wine: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("wine" to listOf("$wine"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/wine/dishes",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Ingredient Information
    * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
    * @param id The ingredient id. 
    * @param amount The amount of this ingredient. (optional)
    * @param unit The unit for the given amount. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getIngredientInformation(id: java.math.BigDecimal, amount: java.math.BigDecimal?, unit: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("amount" to listOf("$amount"), "unit" to listOf("$unit"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/{id}/information".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Ingredient Substitutes
    * Search for substitutes for a given ingredient.
    * @param ingredientName The name of the ingredient you want to replace. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getIngredientSubstitutes(ingredientName: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ingredientName" to listOf("$ingredientName"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/substitutes",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Ingredient Substitutes by ID
    * Search for substitutes for a given ingredient.
    * @param id The id of the ingredient you want substitutes for. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getIngredientSubstitutesByID(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/{id}/substitutes".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Meal Plan Template
    * Get information about a meal plan template.
    * @param username The username. 
    * @param id The shopping list item id. 
    * @param hash The private hash for the username. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getMealPlanTemplate(username: kotlin.String, id: java.math.BigDecimal, hash: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/templates/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Meal Plan Templates
    * Get meal plan templates from user or public ones.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getMealPlanTemplates(username: kotlin.String, hash: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/templates".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Meal Plan Week
    * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
    * @param username The username. 
    * @param startMinusDate The start date of the meal planned week in the format yyyy-mm-dd. 
    * @param hash The private hash for the username. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getMealPlanWeek(username: kotlin.String, startMinusDate: kotlin.String, hash: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/week/{start-date}".replace("{"+"username"+"}", "$username").replace("{"+"start-date"+"}", "$startMinusDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Menu Item Information
    * Use a menu item id to get all available information about a menu item, such as nutrition.
    * @param id The menu item id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getMenuItemInformation(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/menuItems/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Product Information
    * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
    * @param id The id of the packaged food. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getProductInformation(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Random Food Trivia
    * Returns random food trivia.
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRandomFoodTrivia() : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/trivia/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Random Recipes
    * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
    * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
    * @param number The number of random recipes to be returned (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRandomRecipes(limitLicense: kotlin.Boolean?, tags: kotlin.String?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("limitLicense" to listOf("$limitLicense"), "tags" to listOf("$tags"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Equipment by ID
    * Get a recipe&#39;s equipment list.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeEquipmentByID(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/equipmentWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Information
    * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
    * @param id The id of the recipe. 
    * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeInformation(id: java.math.BigDecimal, includeNutrition: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("includeNutrition" to listOf("$includeNutrition"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/information".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Information Bulk
    * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
    * @param ids A comma-separated list of recipe ids. 
    * @param includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeInformationBulk(ids: kotlin.String, includeNutrition: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ids" to listOf("$ids"), "includeNutrition" to listOf("$includeNutrition"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/informationBulk",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Ingredients by ID
    * Get a recipe&#39;s ingredient list.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeIngredientsByID(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/ingredientWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Nutrition Widget by ID
    * Get a recipe&#39;s nutrition widget data.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeNutritionWidgetByID(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Price Breakdown by ID
    * Get a recipe&#39;s price breakdown data.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipePriceBreakdownByID(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/priceBreakdownWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Taste by ID
    * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeTasteByID(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/tasteWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Shopping List
    * Get the current shopping list for the given user.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getShoppingList(username: kotlin.String, hash: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/shopping-list".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Similar Recipes
    * Find recipes which are similar to the given one.
    * @param id The id of the source recipe for which similar recipes should be found. 
    * @param number The number of random recipes to be returned (between 1 and 100). (optional)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getSimilarRecipes(id: java.math.BigDecimal, number: java.math.BigDecimal?, limitLicense: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("number" to listOf("$number"), "limitLicense" to listOf("$limitLicense"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/similar".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Wine Description
    * Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
    * @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getWineDescription(wine: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("wine" to listOf("$wine"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/wine/description",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Wine Pairing
    * Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
    * @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). 
    * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getWinePairing(food: kotlin.String, maxPrice: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("food" to listOf("$food"), "maxPrice" to listOf("$maxPrice"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/wine/pairing",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Wine Recommendation
    * Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
    * @param wine The type of wine to get a specific product recommendation for. 
    * @param maxPrice The maximum price for the specific wine recommendation in USD. (optional)
    * @param minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
    * @param number The number of wine recommendations expected (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun getWineRecommendation(wine: kotlin.String, maxPrice: java.math.BigDecimal?, minRating: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("wine" to listOf("$wine"), "maxPrice" to listOf("$maxPrice"), "minRating" to listOf("$minRating"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/wine/recommendation",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Guess Nutrition by Dish Name
    * Estimate the macronutrients of a dish based on its title.
    * @param title The title of the dish. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun guessNutritionByDishName(title: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("title" to listOf("$title"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/guessNutrition",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Image Analysis by URL
    * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!
    * @param imageUrl The URL of the image to be analyzed. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun imageAnalysisByURL(imageUrl: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("imageUrl" to listOf("$imageUrl"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/images/analyze",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Image Classification by URL
    * Classify a food image. You can play around with that endpoint!
    * @param imageUrl The URL of the image to be classified. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun imageClassificationByURL(imageUrl: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("imageUrl" to listOf("$imageUrl"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/images/classify",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredient Search
    * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
    * @param query The partial or full ingredient name. 
    * @param addChildren Whether to add children of found foods. (optional)
    * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
    * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
    * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
    * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
    * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
    * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
    * @param metaInformation Whether to return more meta information about the ingredients. (optional)
    * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
    * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
    * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
    * @param offset The number of results to skip (between 0 and 990). (optional)
    * @param number The number of expected results (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun ingredientSearch(query: kotlin.String, addChildren: kotlin.Boolean?, minProteinPercent: java.math.BigDecimal?, maxProteinPercent: java.math.BigDecimal?, minFatPercent: java.math.BigDecimal?, maxFatPercent: java.math.BigDecimal?, minCarbsPercent: java.math.BigDecimal?, maxCarbsPercent: java.math.BigDecimal?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "addChildren" to listOf("$addChildren"), "minProteinPercent" to listOf("$minProteinPercent"), "maxProteinPercent" to listOf("$maxProteinPercent"), "minFatPercent" to listOf("$minFatPercent"), "maxFatPercent" to listOf("$maxFatPercent"), "minCarbsPercent" to listOf("$minCarbsPercent"), "maxCarbsPercent" to listOf("$maxCarbsPercent"), "metaInformation" to listOf("$metaInformation"), "intolerances" to listOf("$intolerances"), "sort" to listOf("$sort"), "sortDirection" to listOf("$sortDirection"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Map Ingredients to Grocery Products
    * Map a set of ingredients to products you can buy in the grocery store.
    * @param body  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun mapIngredientsToGroceryProducts(body: kotlin.Any) : kotlin.Any {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/ingredients/map",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Parse Ingredients
    * Extract an ingredient from plain text.
    * @param ingredientList The ingredient list of the recipe, one ingredient per line. 
    * @param servings The number of servings that you can make from the ingredients. 
    * @param includeNutrition Whether nutrition data should be added to correctly parsed ingredients. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun parseIngredients(ingredientList: kotlin.String, servings: java.math.BigDecimal, includeNutrition: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = mapOf("ingredientList" to "$ingredientList", "servings" to "$servings", "includeNutrition" to "$includeNutrition")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/parseIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Quick Answer
    * Answer a nutrition related natural language question.
    * @param q The nutrition related question. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun quickAnswer(q: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/quickAnswer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search All Food
    * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
    * @param query The search query. 
    * @param offset The number of results to skip (between 0 and 990). (optional)
    * @param number The number of expected results (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchAllFood(query: kotlin.String, offset: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Custom Foods
    * Search custom foods in a user&#39;s account.
    * @param query The search query. 
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @param offset The number of results to skip (between 0 and 990). (optional)
    * @param number The number of expected results (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchCustomFoods(query: kotlin.String, username: kotlin.String, hash: kotlin.String, offset: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "username" to listOf("$username"), "hash" to listOf("$hash"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/customFoods/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Food Videos
    * Find recipe and other food related videos.
    * @param query The search query. 
    * @param type The type of the recipes. See a full list of supported meal types. (optional)
    * @param cuisine The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
    * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
    * @param includeIngredients A comma-separated list of ingredients that the recipes should contain. (optional)
    * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
    * @param minLength Minimum video length in seconds. (optional)
    * @param maxLength Maximum video length in seconds. (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The number of results to return (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchFoodVideos(query: kotlin.String, type: kotlin.String?, cuisine: kotlin.String?, diet: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, minLength: java.math.BigDecimal?, maxLength: java.math.BigDecimal?, offset: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "type" to listOf("$type"), "cuisine" to listOf("$cuisine"), "diet" to listOf("$diet"), "includeIngredients" to listOf("$includeIngredients"), "excludeIngredients" to listOf("$excludeIngredients"), "minLength" to listOf("$minLength"), "maxLength" to listOf("$maxLength"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/videos/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Grocery Products
    * Search packaged food products, such as frozen pizza or Greek yogurt.
    * @param query The search query. 
    * @param minCalories The minimum amount of calories the product must have. (optional)
    * @param maxCalories The maximum amount of calories the product can have. (optional)
    * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
    * @param minProtein The minimum amount of protein in grams the product must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
    * @param minFat The minimum amount of fat in grams the product must have. (optional)
    * @param maxFat The maximum amount of fat in grams the product can have. (optional)
    * @param offset The number of results to skip (between 0 and 990). (optional)
    * @param number The number of expected results (between 1 and 100). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchGroceryProducts(query: kotlin.String, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, offset: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Grocery Products by UPC
    * Get information about a packaged food using its UPC.
    * @param upc The product&#39;s UPC. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchGroceryProductsByUPC(upc: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/upc/{upc}".replace("{"+"upc"+"}", "$upc"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Menu Items
    * Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald&#39;s Big Mac or Starbucks Mocha.
    * @param query The search query. 
    * @param minCalories The minimum amount of calories the menu item must have. (optional)
    * @param maxCalories The maximum amount of calories the menu item can have. (optional)
    * @param minCarbs The minimum amount of carbohydrates in grams the menu item must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the menu item can have. (optional)
    * @param minProtein The minimum amount of protein in grams the menu item must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the menu item can have. (optional)
    * @param minFat The minimum amount of fat in grams the menu item must have. (optional)
    * @param maxFat The maximum amount of fat in grams the menu item can have. (optional)
    * @param offset The offset number for paging (between 0 and 990). (optional)
    * @param number The number of expected results (between 1 and 10). (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchMenuItems(query: kotlin.String, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, offset: java.math.BigDecimal?, number: java.math.BigDecimal?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/menuItems/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Recipes
    * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    * @param query The (natural language) recipe search query. 
    * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
    * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
    * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
    * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
    * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
    * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
    * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
    * @param type The type of recipe. See a full list of supported meal types. (optional)
    * @param instructionsRequired Whether the recipes must have instructions. (optional)
    * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
    * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
    * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
    * @param author The username of the recipe author. (optional)
    * @param tags User defined tags that have to match. The author param has to be set. (optional)
    * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
    * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
    * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
    * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
    * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
    * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
    * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
    * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
    * @param minCalories The minimum amount of calories the recipe must have. (optional)
    * @param maxCalories The maximum amount of calories the recipe can have. (optional)
    * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
    * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
    * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
    * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
    * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
    * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
    * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
    * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
    * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
    * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
    * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
    * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
    * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
    * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
    * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
    * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
    * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
    * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
    * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
    * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
    * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
    * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
    * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
    * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
    * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
    * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
    * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
    * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
    * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
    * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
    * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
    * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
    * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
    * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
    * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
    * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
    * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
    * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
    * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
    * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
    * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
    * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
    * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
    * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
    * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
    * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
    * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
    * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
    * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
    * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
    * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
    * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
    * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
    * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
    * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
    * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
    * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
    * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
    * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
    * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
    * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
    * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
    * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
    * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
    * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
    * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The number of expected results (between 1 and 100). (optional)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchRecipes(query: kotlin.String, cuisine: kotlin.String?, excludeCuisine: kotlin.String?, diet: kotlin.String?, intolerances: kotlin.String?, equipment: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, type: kotlin.String?, instructionsRequired: kotlin.Boolean?, fillIngredients: kotlin.Boolean?, addRecipeInformation: kotlin.Boolean?, addRecipeNutrition: kotlin.Boolean?, author: kotlin.String?, tags: kotlin.String?, recipeBoxId: java.math.BigDecimal?, titleMatch: kotlin.String?, maxReadyTime: java.math.BigDecimal?, ignorePantry: kotlin.Boolean?, sort: kotlin.String?, sortDirection: kotlin.String?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, minAlcohol: java.math.BigDecimal?, maxAlcohol: java.math.BigDecimal?, minCaffeine: java.math.BigDecimal?, maxCaffeine: java.math.BigDecimal?, minCopper: java.math.BigDecimal?, maxCopper: java.math.BigDecimal?, minCalcium: java.math.BigDecimal?, maxCalcium: java.math.BigDecimal?, minCholine: java.math.BigDecimal?, maxCholine: java.math.BigDecimal?, minCholesterol: java.math.BigDecimal?, maxCholesterol: java.math.BigDecimal?, minFluoride: java.math.BigDecimal?, maxFluoride: java.math.BigDecimal?, minSaturatedFat: java.math.BigDecimal?, maxSaturatedFat: java.math.BigDecimal?, minVitaminA: java.math.BigDecimal?, maxVitaminA: java.math.BigDecimal?, minVitaminC: java.math.BigDecimal?, maxVitaminC: java.math.BigDecimal?, minVitaminD: java.math.BigDecimal?, maxVitaminD: java.math.BigDecimal?, minVitaminE: java.math.BigDecimal?, maxVitaminE: java.math.BigDecimal?, minVitaminK: java.math.BigDecimal?, maxVitaminK: java.math.BigDecimal?, minVitaminB1: java.math.BigDecimal?, maxVitaminB1: java.math.BigDecimal?, minVitaminB2: java.math.BigDecimal?, maxVitaminB2: java.math.BigDecimal?, minVitaminB5: java.math.BigDecimal?, maxVitaminB5: java.math.BigDecimal?, minVitaminB3: java.math.BigDecimal?, maxVitaminB3: java.math.BigDecimal?, minVitaminB6: java.math.BigDecimal?, maxVitaminB6: java.math.BigDecimal?, minVitaminB12: java.math.BigDecimal?, maxVitaminB12: java.math.BigDecimal?, minFiber: java.math.BigDecimal?, maxFiber: java.math.BigDecimal?, minFolate: java.math.BigDecimal?, maxFolate: java.math.BigDecimal?, minFolicAcid: java.math.BigDecimal?, maxFolicAcid: java.math.BigDecimal?, minIodine: java.math.BigDecimal?, maxIodine: java.math.BigDecimal?, minIron: java.math.BigDecimal?, maxIron: java.math.BigDecimal?, minMagnesium: java.math.BigDecimal?, maxMagnesium: java.math.BigDecimal?, minManganese: java.math.BigDecimal?, maxManganese: java.math.BigDecimal?, minPhosphorus: java.math.BigDecimal?, maxPhosphorus: java.math.BigDecimal?, minPotassium: java.math.BigDecimal?, maxPotassium: java.math.BigDecimal?, minSelenium: java.math.BigDecimal?, maxSelenium: java.math.BigDecimal?, minSodium: java.math.BigDecimal?, maxSodium: java.math.BigDecimal?, minSugar: java.math.BigDecimal?, maxSugar: java.math.BigDecimal?, minZinc: java.math.BigDecimal?, maxZinc: java.math.BigDecimal?, offset: java.math.BigDecimal?, number: java.math.BigDecimal?, limitLicense: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "cuisine" to listOf("$cuisine"), "excludeCuisine" to listOf("$excludeCuisine"), "diet" to listOf("$diet"), "intolerances" to listOf("$intolerances"), "equipment" to listOf("$equipment"), "includeIngredients" to listOf("$includeIngredients"), "excludeIngredients" to listOf("$excludeIngredients"), "type" to listOf("$type"), "instructionsRequired" to listOf("$instructionsRequired"), "fillIngredients" to listOf("$fillIngredients"), "addRecipeInformation" to listOf("$addRecipeInformation"), "addRecipeNutrition" to listOf("$addRecipeNutrition"), "author" to listOf("$author"), "tags" to listOf("$tags"), "recipeBoxId" to listOf("$recipeBoxId"), "titleMatch" to listOf("$titleMatch"), "maxReadyTime" to listOf("$maxReadyTime"), "ignorePantry" to listOf("$ignorePantry"), "sort" to listOf("$sort"), "sortDirection" to listOf("$sortDirection"), "minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "minAlcohol" to listOf("$minAlcohol"), "maxAlcohol" to listOf("$maxAlcohol"), "minCaffeine" to listOf("$minCaffeine"), "maxCaffeine" to listOf("$maxCaffeine"), "minCopper" to listOf("$minCopper"), "maxCopper" to listOf("$maxCopper"), "minCalcium" to listOf("$minCalcium"), "maxCalcium" to listOf("$maxCalcium"), "minCholine" to listOf("$minCholine"), "maxCholine" to listOf("$maxCholine"), "minCholesterol" to listOf("$minCholesterol"), "maxCholesterol" to listOf("$maxCholesterol"), "minFluoride" to listOf("$minFluoride"), "maxFluoride" to listOf("$maxFluoride"), "minSaturatedFat" to listOf("$minSaturatedFat"), "maxSaturatedFat" to listOf("$maxSaturatedFat"), "minVitaminA" to listOf("$minVitaminA"), "maxVitaminA" to listOf("$maxVitaminA"), "minVitaminC" to listOf("$minVitaminC"), "maxVitaminC" to listOf("$maxVitaminC"), "minVitaminD" to listOf("$minVitaminD"), "maxVitaminD" to listOf("$maxVitaminD"), "minVitaminE" to listOf("$minVitaminE"), "maxVitaminE" to listOf("$maxVitaminE"), "minVitaminK" to listOf("$minVitaminK"), "maxVitaminK" to listOf("$maxVitaminK"), "minVitaminB1" to listOf("$minVitaminB1"), "maxVitaminB1" to listOf("$maxVitaminB1"), "minVitaminB2" to listOf("$minVitaminB2"), "maxVitaminB2" to listOf("$maxVitaminB2"), "minVitaminB5" to listOf("$minVitaminB5"), "maxVitaminB5" to listOf("$maxVitaminB5"), "minVitaminB3" to listOf("$minVitaminB3"), "maxVitaminB3" to listOf("$maxVitaminB3"), "minVitaminB6" to listOf("$minVitaminB6"), "maxVitaminB6" to listOf("$maxVitaminB6"), "minVitaminB12" to listOf("$minVitaminB12"), "maxVitaminB12" to listOf("$maxVitaminB12"), "minFiber" to listOf("$minFiber"), "maxFiber" to listOf("$maxFiber"), "minFolate" to listOf("$minFolate"), "maxFolate" to listOf("$maxFolate"), "minFolicAcid" to listOf("$minFolicAcid"), "maxFolicAcid" to listOf("$maxFolicAcid"), "minIodine" to listOf("$minIodine"), "maxIodine" to listOf("$maxIodine"), "minIron" to listOf("$minIron"), "maxIron" to listOf("$maxIron"), "minMagnesium" to listOf("$minMagnesium"), "maxMagnesium" to listOf("$maxMagnesium"), "minManganese" to listOf("$minManganese"), "maxManganese" to listOf("$maxManganese"), "minPhosphorus" to listOf("$minPhosphorus"), "maxPhosphorus" to listOf("$maxPhosphorus"), "minPotassium" to listOf("$minPotassium"), "maxPotassium" to listOf("$maxPotassium"), "minSelenium" to listOf("$minSelenium"), "maxSelenium" to listOf("$maxSelenium"), "minSodium" to listOf("$minSodium"), "maxSodium" to listOf("$maxSodium"), "minSugar" to listOf("$minSugar"), "maxSugar" to listOf("$maxSugar"), "minZinc" to listOf("$minZinc"), "maxZinc" to listOf("$maxZinc"), "offset" to listOf("$offset"), "number" to listOf("$number"), "limitLicense" to listOf("$limitLicense"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/complexSearch",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Recipes by Ingredients
    *              Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
    * @param ingredients A comma-separated list of ingredients that the recipes should contain. 
    * @param number The maximum number of recipes to return (between 1 and 100). Defaults to 10. (optional)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
    * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
    * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchRecipesByIngredients(ingredients: kotlin.String, number: java.math.BigDecimal?, limitLicense: kotlin.Boolean?, ranking: java.math.BigDecimal?, ignorePantry: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ingredients" to listOf("$ingredients"), "number" to listOf("$number"), "limitLicense" to listOf("$limitLicense"), "ranking" to listOf("$ranking"), "ignorePantry" to listOf("$ignorePantry"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/findByIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Recipes by Nutrients
    * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
    * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
    * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
    * @param minCalories The minimum amount of calories the recipe must have. (optional)
    * @param maxCalories The maximum amount of calories the recipe can have. (optional)
    * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
    * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
    * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
    * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
    * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
    * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
    * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
    * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
    * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
    * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
    * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
    * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
    * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
    * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
    * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
    * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
    * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
    * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
    * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
    * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
    * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
    * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
    * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
    * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
    * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
    * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
    * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
    * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
    * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
    * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
    * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
    * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
    * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
    * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
    * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
    * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
    * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
    * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
    * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
    * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
    * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
    * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
    * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
    * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
    * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
    * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
    * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
    * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
    * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
    * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
    * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
    * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
    * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
    * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
    * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
    * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
    * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
    * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
    * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
    * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
    * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
    * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
    * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
    * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
    * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
    * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The number of expected results (between 1 and 100). (optional)
    * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchRecipesByNutrients(minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, minAlcohol: java.math.BigDecimal?, maxAlcohol: java.math.BigDecimal?, minCaffeine: java.math.BigDecimal?, maxCaffeine: java.math.BigDecimal?, minCopper: java.math.BigDecimal?, maxCopper: java.math.BigDecimal?, minCalcium: java.math.BigDecimal?, maxCalcium: java.math.BigDecimal?, minCholine: java.math.BigDecimal?, maxCholine: java.math.BigDecimal?, minCholesterol: java.math.BigDecimal?, maxCholesterol: java.math.BigDecimal?, minFluoride: java.math.BigDecimal?, maxFluoride: java.math.BigDecimal?, minSaturatedFat: java.math.BigDecimal?, maxSaturatedFat: java.math.BigDecimal?, minVitaminA: java.math.BigDecimal?, maxVitaminA: java.math.BigDecimal?, minVitaminC: java.math.BigDecimal?, maxVitaminC: java.math.BigDecimal?, minVitaminD: java.math.BigDecimal?, maxVitaminD: java.math.BigDecimal?, minVitaminE: java.math.BigDecimal?, maxVitaminE: java.math.BigDecimal?, minVitaminK: java.math.BigDecimal?, maxVitaminK: java.math.BigDecimal?, minVitaminB1: java.math.BigDecimal?, maxVitaminB1: java.math.BigDecimal?, minVitaminB2: java.math.BigDecimal?, maxVitaminB2: java.math.BigDecimal?, minVitaminB5: java.math.BigDecimal?, maxVitaminB5: java.math.BigDecimal?, minVitaminB3: java.math.BigDecimal?, maxVitaminB3: java.math.BigDecimal?, minVitaminB6: java.math.BigDecimal?, maxVitaminB6: java.math.BigDecimal?, minVitaminB12: java.math.BigDecimal?, maxVitaminB12: java.math.BigDecimal?, minFiber: java.math.BigDecimal?, maxFiber: java.math.BigDecimal?, minFolate: java.math.BigDecimal?, maxFolate: java.math.BigDecimal?, minFolicAcid: java.math.BigDecimal?, maxFolicAcid: java.math.BigDecimal?, minIodine: java.math.BigDecimal?, maxIodine: java.math.BigDecimal?, minIron: java.math.BigDecimal?, maxIron: java.math.BigDecimal?, minMagnesium: java.math.BigDecimal?, maxMagnesium: java.math.BigDecimal?, minManganese: java.math.BigDecimal?, maxManganese: java.math.BigDecimal?, minPhosphorus: java.math.BigDecimal?, maxPhosphorus: java.math.BigDecimal?, minPotassium: java.math.BigDecimal?, maxPotassium: java.math.BigDecimal?, minSelenium: java.math.BigDecimal?, maxSelenium: java.math.BigDecimal?, minSodium: java.math.BigDecimal?, maxSodium: java.math.BigDecimal?, minSugar: java.math.BigDecimal?, maxSugar: java.math.BigDecimal?, minZinc: java.math.BigDecimal?, maxZinc: java.math.BigDecimal?, offset: java.math.BigDecimal?, number: java.math.BigDecimal?, random: kotlin.Boolean?, limitLicense: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "minAlcohol" to listOf("$minAlcohol"), "maxAlcohol" to listOf("$maxAlcohol"), "minCaffeine" to listOf("$minCaffeine"), "maxCaffeine" to listOf("$maxCaffeine"), "minCopper" to listOf("$minCopper"), "maxCopper" to listOf("$maxCopper"), "minCalcium" to listOf("$minCalcium"), "maxCalcium" to listOf("$maxCalcium"), "minCholine" to listOf("$minCholine"), "maxCholine" to listOf("$maxCholine"), "minCholesterol" to listOf("$minCholesterol"), "maxCholesterol" to listOf("$maxCholesterol"), "minFluoride" to listOf("$minFluoride"), "maxFluoride" to listOf("$maxFluoride"), "minSaturatedFat" to listOf("$minSaturatedFat"), "maxSaturatedFat" to listOf("$maxSaturatedFat"), "minVitaminA" to listOf("$minVitaminA"), "maxVitaminA" to listOf("$maxVitaminA"), "minVitaminC" to listOf("$minVitaminC"), "maxVitaminC" to listOf("$maxVitaminC"), "minVitaminD" to listOf("$minVitaminD"), "maxVitaminD" to listOf("$maxVitaminD"), "minVitaminE" to listOf("$minVitaminE"), "maxVitaminE" to listOf("$maxVitaminE"), "minVitaminK" to listOf("$minVitaminK"), "maxVitaminK" to listOf("$maxVitaminK"), "minVitaminB1" to listOf("$minVitaminB1"), "maxVitaminB1" to listOf("$maxVitaminB1"), "minVitaminB2" to listOf("$minVitaminB2"), "maxVitaminB2" to listOf("$maxVitaminB2"), "minVitaminB5" to listOf("$minVitaminB5"), "maxVitaminB5" to listOf("$maxVitaminB5"), "minVitaminB3" to listOf("$minVitaminB3"), "maxVitaminB3" to listOf("$maxVitaminB3"), "minVitaminB6" to listOf("$minVitaminB6"), "maxVitaminB6" to listOf("$maxVitaminB6"), "minVitaminB12" to listOf("$minVitaminB12"), "maxVitaminB12" to listOf("$maxVitaminB12"), "minFiber" to listOf("$minFiber"), "maxFiber" to listOf("$maxFiber"), "minFolate" to listOf("$minFolate"), "maxFolate" to listOf("$maxFolate"), "minFolicAcid" to listOf("$minFolicAcid"), "maxFolicAcid" to listOf("$maxFolicAcid"), "minIodine" to listOf("$minIodine"), "maxIodine" to listOf("$maxIodine"), "minIron" to listOf("$minIron"), "maxIron" to listOf("$maxIron"), "minMagnesium" to listOf("$minMagnesium"), "maxMagnesium" to listOf("$maxMagnesium"), "minManganese" to listOf("$minManganese"), "maxManganese" to listOf("$maxManganese"), "minPhosphorus" to listOf("$minPhosphorus"), "maxPhosphorus" to listOf("$maxPhosphorus"), "minPotassium" to listOf("$minPotassium"), "maxPotassium" to listOf("$maxPotassium"), "minSelenium" to listOf("$minSelenium"), "maxSelenium" to listOf("$maxSelenium"), "minSodium" to listOf("$minSodium"), "maxSodium" to listOf("$maxSodium"), "minSugar" to listOf("$minSugar"), "maxSugar" to listOf("$maxSugar"), "minZinc" to listOf("$minZinc"), "maxZinc" to listOf("$maxZinc"), "offset" to listOf("$offset"), "number" to listOf("$number"), "random" to listOf("$random"), "limitLicense" to listOf("$limitLicense"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/findByNutrients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Site Content
    * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
    * @param query The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun searchSiteContent(query: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/site/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Summarize Recipe
    * Automatically generate a short description that summarizes key information about the recipe.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun summarizeRecipe(id: java.math.BigDecimal) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/summary".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Talk to Chatbot
    * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
    * @param text The request / question / answer from the user to the chatbot. 
    * @param contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun talkToChatbot(text: kotlin.String, contextId: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "contextId" to listOf("$contextId"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/converse",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Equipment
    * Visualize the equipment used to make a recipe. You can play around with that endpoint!
    * @param instructions The recipe&#39;s instructions. 
    * @param view How to visualize the equipment, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeEquipment(instructions: kotlin.String, view: kotlin.String?, defaultCss: kotlin.Boolean?, showBacklink: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("instructions" to "$instructions", "view" to "$view", "defaultCss" to "$defaultCss", "showBacklink" to "$showBacklink")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeEquipment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Ingredients
    * Visualize ingredients of a recipe. You can play around with that endpoint!
    * @param ingredientList The ingredient list of the recipe, one ingredient per line. 
    * @param servings The number of servings. 
    * @param measure The original system of measurement, either \\\&quot;metric\\\&quot; or \\\&quot;us\\\&quot;. (optional)
    * @param view How to visualize the ingredients, either \\\&quot;grid\\\&quot; or \\\&quot;list\\\&quot;. (optional)
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeIngredients(ingredientList: kotlin.String, servings: java.math.BigDecimal, measure: kotlin.String?, view: kotlin.String?, defaultCss: kotlin.Boolean?, showBacklink: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("ingredientList" to "$ingredientList", "servings" to "$servings", "measure" to "$measure", "view" to "$view", "defaultCss" to "$defaultCss", "showBacklink" to "$showBacklink")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Menu Item Nutrition by ID
    * Visualize a menu item&#39;s nutritional information as HTML including CSS.
    * @param id The menu item id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeMenuItemNutritionByID(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/menuItems/{id}/nutritionWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Price Breakdown
    * Visualize the price breakdown of a recipe. You can play around with that endpoint!
    * @param ingredientList The ingredient list of the recipe, one ingredient per line. 
    * @param servings The number of servings. 
    * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full). (optional)
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizePriceBreakdown(ingredientList: kotlin.String, servings: java.math.BigDecimal, mode: java.math.BigDecimal?, defaultCss: kotlin.Boolean?, showBacklink: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("ingredientList" to "$ingredientList", "servings" to "$servings", "mode" to "$mode", "defaultCss" to "$defaultCss", "showBacklink" to "$showBacklink")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizePriceEstimator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Product Nutrition by ID
    * Visualize a product&#39;s nutritional information as HTML including CSS.
    * @param id The id of the product. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeProductNutritionByID(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}/nutritionWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Equipment by ID
    * Visualize a recipe&#39;s equipment list.
    * @param id The recipe id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeEquipmentByID(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/equipmentWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Ingredients by ID
    * Visualize a recipe&#39;s ingredient list.
    * @param id The recipe id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeIngredientsByID(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/ingredientWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Nutrition
    * Visualize a recipe&#39;s nutritional information as HTML including CSS. You can play around with that endpoint!
    * @param ingredientList The ingredient list of the recipe, one ingredient per line. 
    * @param servings The number of servings. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeNutrition(ingredientList: kotlin.String, servings: java.math.BigDecimal, defaultCss: kotlin.Boolean?, showBacklink: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("ingredientList" to "$ingredientList", "servings" to "$servings", "defaultCss" to "$defaultCss", "showBacklink" to "$showBacklink")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeNutrition",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Nutrition by ID
    * Visualize a recipe&#39;s nutritional information as HTML including CSS.
    * @param id The recipe id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeNutritionByID(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Price Breakdown by ID
    * Visualize a recipe&#39;s price breakdown.
    * @param id The recipe id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipePriceBreakdownByID(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/priceBreakdownWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Taste
    * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
    * @param ingredientList The ingredient list of the recipe, one ingredient per line. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeTaste(ingredientList: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("ingredientList" to "$ingredientList")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeTaste",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Visualize Recipe Taste by ID
    * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    * @param id The recipe id. 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeTasteByID(id: java.math.BigDecimal) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/tasteWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
